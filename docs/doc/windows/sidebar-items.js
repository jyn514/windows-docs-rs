initSidebarItems({"attr":[["implement","Rust structs can use the `implement` macro to implement entire WinRT classes or any combination of existing COM and WinRT interfaces."]],"fn":[["create_instance","Creates a COM object with the given CLSID."],["factory","Attempts to load the factory interface for the given WinRT class."],["initialize_mta","Initializes COM for use by the calling thread for the multi-threaded apartment (MTA)."],["initialize_sta","Initializes COM for use by the calling thread for a single-threaded apartment (STA)."]],"macro":[["build","A macro for generating WinRT modules to a .rs file at build time."],["include_bindings","Includes the generated bindings into the current context."]],"struct":[["Array","A WinRT array stores elements contiguously in a heap-allocated buffer."],["Error","A WinRT error object consists of both an error code as well as detailed error information for debugging."],["FactoryCache","Attempts to load and cache the factory interface for the given WinRT class. This is automatically"],["Guid","A globally unique identifier (GUID) used to identify COM and WinRT interfaces."],["HRESULT","A primitive error code value returned by most COM functions."],["HSTRING","A WinRT string, sometimes called an HSTRING, is reference-counted and logically immutable. It should only be used for communicating with WinRT APIs."],["IInspectable","A WinRT object that may be used as a polymorphic stand-in for any WinRT class, interface, or boxed value. `IInspectable` represents the IInspectable interface."],["IUnknown","All COM interfaces (and thus WinRT classes and interfaces) implement IUnknown under the hood to provide reference-counted lifetime management as well as the ability to query for additional interfaces that the object may implement."],["RefCount","A thread-safe reference count for use with COM/HSTRING implementations."],["Waiter","A simple blocking waiter used by the generated bindings and should not be used directly."],["Weak","`Weak` holds a non-owning reference to an object."],["WeakRefCount","A thread-safe reference count for use with COM weak reference implementations."]],"trait":[["Abi","Provides a generic way of referring to and converting between a Rust object and its ABI equivalent."],["Compose",""],["Interface","Provides low-level access to a COM interface."],["IntoParam",""],["RuntimeName","A WinRT type that can be identified by a name in order to support activation and marshaling."],["RuntimeType","RuntimeType is used to constrain WinRT generic types to WinRT types."]],"type":[["Result","A `Result` type that provides Windows error information."]]});